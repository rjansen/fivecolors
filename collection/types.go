// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package collection

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Card struct {
	ID            string                 `json:"id"`
	Name          string                 `json:"name"`
	Types         []string               `json:"types"`
	Costs         []string               `json:"costs"`
	NumberCost    float64                `json:"numberCost"`
	IDExternal    string                 `json:"idExternal"`
	OrderExternal *string                `json:"orderExternal"`
	IDRarity      string                 `json:"idRarity"`
	Rarity        *Rarity                `json:"rarity"`
	IDSet         string                 `json:"idSet"`
	Set           *Set                   `json:"set"`
	IDAsset       string                 `json:"idAsset"`
	Rules         []string               `json:"rules"`
	Rate          *float64               `json:"rate"`
	RateVotes     *int                   `json:"rateVotes"`
	Artist        *string                `json:"artist"`
	Flavor        *string                `json:"flavor"`
	Data          map[string]interface{} `json:"data"`
	UpdatedAt     time.Time              `json:"updatedAt"`
	DeletedAt     *time.Time             `json:"deletedAt"`
}

type CardFilter struct {
	Name   *string       `json:"name"`
	Types  []string      `json:"types"`
	Costs  []string      `json:"costs"`
	Set    *SetFilter    `json:"set"`
	Rarity *RarityFilter `json:"rarity"`
}

type CardInput struct {
	ID            string                 `json:"id"`
	Name          string                 `json:"name"`
	Types         []string               `json:"types"`
	Costs         []string               `json:"costs"`
	NumberCost    float64                `json:"numberCost"`
	IDExternal    string                 `json:"idExternal"`
	OrderExternal *string                `json:"orderExternal"`
	IDRarity      string                 `json:"idRarity"`
	Rarity        *RarityInput           `json:"rarity"`
	IDSet         string                 `json:"idSet"`
	Set           *SetInput              `json:"set"`
	IDAsset       string                 `json:"idAsset"`
	Rules         []string               `json:"rules"`
	Rate          *float64               `json:"rate"`
	RateVotes     *int                   `json:"rateVotes"`
	Artist        *string                `json:"artist"`
	Flavor        *string                `json:"flavor"`
	Data          map[string]interface{} `json:"data"`
}

type Rarity struct {
	ID    string      `json:"id"`
	Name  RarityName  `json:"name"`
	Alias RarityAlias `json:"alias"`
}

type RarityFilter struct {
	ID    *string      `json:"id"`
	Name  *RarityName  `json:"name"`
	Alias *RarityAlias `json:"alias"`
}

type RarityInput struct {
	ID    string      `json:"id"`
	Name  RarityName  `json:"name"`
	Alias RarityAlias `json:"alias"`
}

type Set struct {
	ID        string                 `json:"id"`
	Name      string                 `json:"name"`
	Alias     string                 `json:"alias"`
	Asset     map[string]interface{} `json:"asset"`
	UpdatedAt time.Time              `json:"updatedAt"`
	DeletedAt *time.Time             `json:"deletedAt"`
}

type SetFilter struct {
	ID    *string `json:"id"`
	Name  *string `json:"name"`
	Alias *string `json:"alias"`
}

type SetInput struct {
	ID         string                 `json:"id"`
	Name       string                 `json:"name"`
	Alias      string                 `json:"alias"`
	Asset      map[string]interface{} `json:"asset"`
	CardsCount int                    `json:"cardsCount"`
}

type UpsertCards struct {
	AffectedRecords int       `json:"affectedRecords"`
	CommittedAt     time.Time `json:"committedAt"`
}

type RarityAlias string

const (
	RarityAliasC RarityAlias = "C"
	RarityAliasU RarityAlias = "U"
	RarityAliasR RarityAlias = "R"
	RarityAliasM RarityAlias = "M"
	RarityAliasS RarityAlias = "S"
	RarityAliasL RarityAlias = "L"
	RarityAliasP RarityAlias = "P"
	RarityAliasB RarityAlias = "B"
)

var AllRarityAlias = []RarityAlias{
	RarityAliasC,
	RarityAliasU,
	RarityAliasR,
	RarityAliasM,
	RarityAliasS,
	RarityAliasL,
	RarityAliasP,
	RarityAliasB,
}

func (e RarityAlias) IsValid() bool {
	switch e {
	case RarityAliasC, RarityAliasU, RarityAliasR, RarityAliasM, RarityAliasS, RarityAliasL, RarityAliasP, RarityAliasB:
		return true
	}
	return false
}

func (e RarityAlias) String() string {
	return string(e)
}

func (e *RarityAlias) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RarityAlias(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RarityAlias", str)
	}
	return nil
}

func (e RarityAlias) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RarityName string

const (
	RarityNameCommon     RarityName = "Common"
	RarityNameUncommon   RarityName = "Uncommon"
	RarityNameRare       RarityName = "Rare"
	RarityNameMythicRare RarityName = "MythicRare"
	RarityNameSpecial    RarityName = "Special"
	RarityNameLand       RarityName = "Land"
	RarityNamePromo      RarityName = "Promo"
	RarityNameBonus      RarityName = "Bonus"
)

var AllRarityName = []RarityName{
	RarityNameCommon,
	RarityNameUncommon,
	RarityNameRare,
	RarityNameMythicRare,
	RarityNameSpecial,
	RarityNameLand,
	RarityNamePromo,
	RarityNameBonus,
}

func (e RarityName) IsValid() bool {
	switch e {
	case RarityNameCommon, RarityNameUncommon, RarityNameRare, RarityNameMythicRare, RarityNameSpecial, RarityNameLand, RarityNamePromo, RarityNameBonus:
		return true
	}
	return false
}

func (e RarityName) String() string {
	return string(e)
}

func (e *RarityName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RarityName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RarityName", str)
	}
	return nil
}

func (e RarityName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
