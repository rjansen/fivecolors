// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	"context"

	"github.com/rjansen/fivecolors/collection"

	"github.com/stretchr/testify/mock"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

func NewWriter() *Writer {
	return new(Writer)
}

// UpsertCards provides a mock function with given fields: ctx, cards
func (_m *Writer) UpsertCards(ctx context.Context, cards []collection.CardInput) (*collection.UpsertCards, error) {
	ret := _m.Called(ctx, cards)

	var r0 *collection.UpsertCards
	if rf, ok := ret.Get(0).(func(context.Context, []collection.CardInput) *collection.UpsertCards); ok {
		r0 = rf(ctx, cards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collection.UpsertCards)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []collection.CardInput) error); ok {
		r1 = rf(ctx, cards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSet provides a mock function with given fields: ctx, set
func (_m *Writer) UpsertSet(ctx context.Context, set collection.SetInput) (*collection.Set, error) {
	ret := _m.Called(ctx, set)

	var r0 *collection.Set
	if rf, ok := ret.Get(0).(func(context.Context, collection.SetInput) *collection.Set); ok {
		r0 = rf(ctx, set)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collection.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, collection.SetInput) error); ok {
		r1 = rf(ctx, set)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
