// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	"context"

	"github.com/rjansen/fivecolors/collection"

	"github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

func NewReader() *Reader {
	return new(Reader)
}

// Card provides a mock function with given fields: ctx, id
func (_m *Reader) Card(ctx context.Context, id string) (*collection.Card, error) {
	ret := _m.Called(ctx, id)

	var r0 *collection.Card
	if rf, ok := ret.Get(0).(func(context.Context, string) *collection.Card); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collection.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardBy provides a mock function with given fields: ctx, filter
func (_m *Reader) CardBy(ctx context.Context, filter collection.CardFilter) ([]collection.Card, error) {
	ret := _m.Called(ctx, filter)

	var r0 []collection.Card
	if rf, ok := ret.Get(0).(func(context.Context, collection.CardFilter) []collection.Card); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collection.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, collection.CardFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, id
func (_m *Reader) Set(ctx context.Context, id string) (*collection.Set, error) {
	ret := _m.Called(ctx, id)

	var r0 *collection.Set
	if rf, ok := ret.Get(0).(func(context.Context, string) *collection.Set); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*collection.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBy provides a mock function with given fields: ctx, filter
func (_m *Reader) SetBy(ctx context.Context, filter collection.SetFilter) ([]collection.Set, error) {
	ret := _m.Called(ctx, filter)

	var r0 []collection.Set
	if rf, ok := ret.Get(0).(func(context.Context, collection.SetFilter) []collection.Set); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collection.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, collection.SetFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
