// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Card struct {
	ID            string     `json:"id"`
	Name          string     `json:"name"`
	Types         []string   `json:"types"`
	Costs         []string   `json:"costs"`
	NumberCost    float64    `json:"numberCost"`
	IDExternal    string     `json:"idExternal"`
	OrderExternal *string    `json:"orderExternal"`
	IDRarity      string     `json:"idRarity"`
	Rarity        Rarity     `json:"rarity"`
	IDSet         string     `json:"idSet"`
	Set           Set        `json:"set"`
	IDAsset       string     `json:"idAsset"`
	Rules         []string   `json:"rules"`
	Rate          *float64   `json:"rate"`
	RateVotes     *int       `json:"rateVotes"`
	Artist        *string    `json:"artist"`
	Flavor        *string    `json:"flavor"`
	Data          *Object    `json:"data"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     *time.Time `json:"updatedAt"`
	DeletedAt     *time.Time `json:"deletedAt"`
}

type CardFilter struct {
	ID     string       `json:"id"`
	Name   string       `json:"name"`
	Types  []string     `json:"types"`
	Costs  []string     `json:"costs"`
	Set    SetFilter    `json:"set"`
	Rarity RarityFilter `json:"rarity"`
}

type Rarity struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Alias string `json:"alias"`
}

type RarityFilter struct {
	ID    RarityId    `json:"id"`
	Alias RarityAlias `json:"alias"`
}

type Set struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Alias     string     `json:"alias"`
	Asset     Object     `json:"asset"`
	Cards     []Card     `json:"cards"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	DeletedAt *time.Time `json:"deletedAt"`
}

type SetFilter struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Alias string `json:"alias"`
}

type RarityAlias string

const (
	RarityAliasC RarityAlias = "C"
	RarityAliasU RarityAlias = "U"
	RarityAliasR RarityAlias = "R"
	RarityAliasM RarityAlias = "M"
	RarityAliasS RarityAlias = "S"
	RarityAliasL RarityAlias = "L"
	RarityAliasP RarityAlias = "P"
	RarityAliasB RarityAlias = "B"
)

func (e RarityAlias) IsValid() bool {
	switch e {
	case RarityAliasC, RarityAliasU, RarityAliasR, RarityAliasM, RarityAliasS, RarityAliasL, RarityAliasP, RarityAliasB:
		return true
	}
	return false
}

func (e RarityAlias) String() string {
	return string(e)
}

func (e *RarityAlias) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RarityAlias(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RarityAlias", str)
	}
	return nil
}

func (e RarityAlias) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RarityId string

const (
	RarityIdCommon     RarityId = "Common"
	RarityIdUncommon   RarityId = "Uncommon"
	RarityIdRare       RarityId = "Rare"
	RarityIdMythicRare RarityId = "MythicRare"
	RarityIdSpecial    RarityId = "Special"
	RarityIdLand       RarityId = "Land"
	RarityIdPromo      RarityId = "Promo"
	RarityIdBonus      RarityId = "Bonus"
)

func (e RarityId) IsValid() bool {
	switch e {
	case RarityIdCommon, RarityIdUncommon, RarityIdRare, RarityIdMythicRare, RarityIdSpecial, RarityIdLand, RarityIdPromo, RarityIdBonus:
		return true
	}
	return false
}

func (e RarityId) String() string {
	return string(e)
}

func (e *RarityId) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RarityId(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RarityId", str)
	}
	return nil
}

func (e RarityId) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
