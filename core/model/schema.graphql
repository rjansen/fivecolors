scalar DateTime
scalar Object

enum RarityName {
  Common
  Uncommon
  Rare
  MythicRare
  Special
  Land
  Promo
  Bonus
}

enum RarityAlias {
  C
  U
  R
  M
  S
  L
  P
  B
}

type Rarity {
  id: ID!
  name: RarityName!
  alias: RarityAlias!
}

type Set {
  id:    ID!
  name:  String!
  alias: String!
  asset: Object!
  cards: [Card!]
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type Card {
  id: ID!
  name: String!
  typesObject: Object!
  costsObject: Object
  types: [String!]!
  costs: [String!]
  numberCost: Float!
  idExternal: String!
  orderExternal: String
  idRarity: String!
  rarity: Rarity
  idSet: String!
  set: Set
  idAsset: String!
  rules: [String!]
  rate: Float
  rateVotes: Int
  artist: String
  flavor: String
  data: Object
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

input RarityFilter {
  id: ID
  name: RarityName
  alias: RarityAlias
}

input SetFilter {
  id: ID
  name: String
  alias: String
}

input CardFilter {
  id: ID
  name: String
  typesObject: [String!]
  costsObject: [String!]
  idSets: [ID!]
  idRarity: ID
  types: String
  costs: String
  set: SetFilter
  rarity: RarityFilter
}

type Query {
  set(id: ID!): Set!
  card(id: ID!): Card!
  setBy(filter: SetFilter!): [Set!]!
  cardBy(filter: CardFilter!): [Card!]!
}
